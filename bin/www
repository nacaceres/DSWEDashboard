#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("dswedashboard:server");
const http = require("http");
var request = require("request");
const MyMongoLib = require("../MyMongoLib.js");
const MyWSLib = require("../MyWSLib.js");
const myMongoLib = MyMongoLib();
const myWSLib = MyWSLib();
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort("8082");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

let timer = () => {
  let hrs = 0.5; //Cada cuantas horas se refresca
  refrescar();
  setTimeout(() => {
    timer();
  }, hrs * 60 * 60000);
};

let refreshGrupos = secciones => {
  let grupo = null;
  let numero = 0;
  let index = 0;
  for (index = 0; index < secciones.length; index++) {
    let seccion = secciones[index];
    numero = seccion.numero;
    if (seccion.grupos.length > 0) {
      grupo = seccion.grupos.pop();
      break;
    }
  }

  if (grupo !== null && numero !== 0) {
    var options = {
      url:
        "https://script.google.com/macros/s/AKfycbyaYhNNZ1Do_o4sI6mzFkzoDGr_UjJs1vZbrtk28Eye7JxXlAE/exec?seccion=" +
        numero +
        "&grupo=" +
        grupo
    };
    request.get(options, function(error, response, body) {
      if (!error) {
        var grupoJSON = JSON.parse(body).seccion;
        if (JSON.parse(body).estado === "OKFETCHSICAPI") {
          myMongoLib
            .deleteGrupo(numero, grupo)
            .then(docs => {
              myMongoLib
                .postGrupo(grupoJSON)
                .then(docs => {
                  console.log("OK" + grupo);
                  refreshGrupos(secciones);
                })
                .catch(err => {
                  console.log(err);
                });
            })
            .catch(err => {
              myMongoLib
                .postGrupo(grupoJSON)
                .then(docs => {
                  console.log("OKDel" + grupo);
                  refreshGrupos(secciones);
                })
                .catch(err => {
                  console.log(err);
                });
            });
        } else {
          console.log("FALLOO");
          // secciones[index].push(grupo);
          // refreshGrupos(secciones);
        }
      } else {
        console.log(error);
      }
    });
  }
};

let refrescar = () => {
  console.log("Refrescando");
  var options = {
    url:
      "https://script.google.com/macros/s/AKfycbyaYhNNZ1Do_o4sI6mzFkzoDGr_UjJs1vZbrtk28Eye7JxXlAE/exec"
  };
  // use the access token to access the Spotify Web API
  request.get(options, function(error, response, body) {
    if (!error) {
      var secciones = JSON.parse(body).secciones;
      refreshGrupos(secciones);
    } else {
      console.log(error);
    }
  });
};

/**
 * Listen on provided port, on all network interfaces.
 */
myWSLib.setupWS(server);
myMongoLib.listenToChanges(myWSLib.notifyAll, timer);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case "EACCES":
    console.error(bind + " requires elevated privileges");
    process.exit(1);
    break;
  case "EADDRINUSE":
    console.error(bind + " is already in use");
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
